{"frames":[{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"forecast::auto.arima(train)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"myarima(x, order = c(results[k, 1], d, results[k, 3]), seasonal = c(results[k, \n    4], D, results[k, 6]), constant = results[k, 7] == 1, ic, \n    trace, approximation = FALSE, method = method, xreg = xreg, \n    ...)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"suppressWarnings(fit <- try(stats::arima(x = x, order = order, \n    seasonal = list(order = seasonal, period = m), xreg = xreg, \n    method = method, ...), silent = TRUE))","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"withCallingHandlers(expr, warning = function(w) invokeRestart(\"muffleWarning\"))","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"try(stats::arima(x = x, order = order, seasonal = list(order = seasonal, \n    period = m), xreg = xreg, method = method, ...), silent = TRUE)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"tryCatch(expr, error = function(e) {\n    call <- conditionCall(e)\n    if (!is.null(call)) {\n        if (identical(call[[1L]], quote(doTryCatch)))  ...","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"tryCatchList(expr, classes, parentenv, handlers)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"tryCatchOne(expr, names, parentenv, handlers[[1L]])","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"doTryCatch(return(expr), name, parentenv, handler)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"stats::arima(x = x, order = order, seasonal = list(order = seasonal, \n    period = m), xreg = xreg, method = method, ...)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"optim(init[mask], armafn, method = optim.method, hessian = TRUE, \n    control = optim.control, trans = as.logical(transform.pars))","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"(function (par) \nfn(par, ...))(c(2.4105173023037, -0.504555659673252, -1.26484394066787, \n0.3118677567323, -0.00144891475347868))","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"fn(par, ...)","line_number":0}],"message":"no loop for break/next, jumping to top level"}