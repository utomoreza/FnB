summarise(seasonal = sum(Seasonal24 + Seasonal168)) %>%
distinct(hour, day, seasonal) %>%
ggplot(mapping = aes(x = hour, y = seasonal)) +
geom_col(aes(fill = day)) +
scale_fill_viridis_d(option = "plasma") +
labs(
title = "Seasonality Pattern Analysis",
subtitle = "Daily and Weekly"
)
as.data.frame(fnb_msts_dec) %>%
mutate(day = fnb_pad$day,
hour = fnb_pad$hour) %>%
group_by(day, hour) %>%
summarise(seasonal = sum(Seasonal24 + Seasonal168)) %>%
distinct(hour, day, seasonal)
title = "Seasonality Pattern Analysis",
as.data.frame(fnb_msts_dec) %>%
mutate(day = fnb_pad$day,
hour = fnb_pad$hour) %>%
group_by(day, hour) %>%
summarise(seasonal = sum(Seasonal24 + Seasonal168)) %>%
distinct(hour, day, seasonal) %>%
ggplot(mapping = aes(x = hour, y = seasonal)) +
geom_col(aes(fill = day)) +
scale_fill_viridis_d(option = "plasma") +
labs(title = "Seasonality Pattern Analysis",
subtitle = "Daily and Weekly") +
theme(axis.text.x = element_blank())
as.data.frame(fnb_msts_dec) %>%
mutate(day = fnb_pad$day,
hour = fnb_pad$hour) %>%
group_by(day, hour) %>%
summarise(seasonal = sum(Seasonal24 + Seasonal168)) %>%
distinct(hour, day, seasonal) %>%
ggplot(mapping = aes(x = hour, y = seasonal)) +
geom_col(aes(fill = day)) +
scale_fill_viridis_d(option = "plasma") +
labs(title = "Seasonality Pattern Analysis",
subtitle = "Daily and Weekly") +
theme(axis.text.y = element_blank())
as.data.frame(fnb_msts_dec) %>%
mutate(day = fnb_pad$day,
hour = fnb_pad$hour) %>%
group_by(day, hour) %>%
summarise(seasonal = sum(Seasonal24 + Seasonal168)) %>%
distinct(hour, day, seasonal) %>%
ggplot(mapping = aes(x = hour, y = seasonal)) +
geom_col(aes(fill = day)) +
scale_fill_viridis_d(option = "plasma") +
labs(title = "Seasonality Pattern Analysis",
subtitle = "Daily and Weekly") +
theme(axis.text.y = element_blank(),
axis.ticks.x = element_blank())
fnb_pad %>%
mutate(seasonal = fnb_dec$seasonal) %>% # create the seasonal column from decomposed ts object
distinct(hour, seasonal) %>%
ggplot(mapping = aes(x = hour, y = seasonal)) +
geom_col() +
scale_x_continuous(breaks = seq(0,24,1)) +
labs(title = "Seasonality Pattern Analysis",
subtitle = "Daily") +
theme(axis.text.y = element_blank())
as.data.frame(fnb_msts_dec) %>%
mutate(hour = fnb_pad$hour) %>%
group_by(day, hour) %>%
# summarise(seasonal = sum(Seasonal24 + Seasonal168)) %>%
distinct(hour, seasonal) %>%
ggplot(mapping = aes(x = hour, y = seasonal)) +
geom_col() +
scale_fill_viridis_d(option = "plasma") +
labs(title = "Seasonality Pattern Analysis",
subtitle = "Daily and Weekly") +
theme(axis.text.y = element_blank())
as.data.frame(fnb_msts_dec) %>%
mutate(hour = fnb_pad$hour) %>%
# group_by(day, hour) %>%
# summarise(seasonal = sum(Seasonal24 + Seasonal168)) %>%
distinct(hour, seasonal) %>%
ggplot(mapping = aes(x = hour, y = seasonal)) +
geom_col() +
scale_fill_viridis_d(option = "plasma") +
labs(title = "Seasonality Pattern Analysis",
subtitle = "Daily and Weekly") +
theme(axis.text.y = element_blank())
as.data.frame(fnb_msts_dec) %>%
mutate(hour = fnb_pad$hour) %>%
# group_by(day, hour) %>%
# summarise(seasonal = sum(Seasonal24 + Seasonal168)) %>%
distinct(hour, seasonal) %>%
ggplot(mapping = aes(x = hour, y = seasonal24)) +
geom_col() +
scale_fill_viridis_d(option = "plasma") +
labs(title = "Seasonality Pattern Analysis",
subtitle = "Daily and Weekly") +
theme(axis.text.y = element_blank())
as.data.frame(fnb_msts_dec) %>%
mutate(hour = fnb_pad$hour) %>%
# group_by(day, hour) %>%
# summarise(seasonal = sum(Seasonal24 + Seasonal168)) %>%
distinct(hour, seasonal) %>%
ggplot(mapping = aes(x = hour, y = Seasonal24)) +
geom_col() +
scale_fill_viridis_d(option = "plasma") +
labs(title = "Seasonality Pattern Analysis",
subtitle = "Daily and Weekly") +
theme(axis.text.y = element_blank())
as.data.frame(fnb_msts_dec)
as.data.frame(fnb_msts_dec) %>%
mutate(hour = fnb_pad$hour) %>%
# group_by(day, hour) %>%
# summarise(seasonal = sum(Seasonal24 + Seasonal168)) %>%
distinct(hour, Seasonal24) %>%
ggplot(mapping = aes(x = hour, y = Seasonal24)) +
geom_col() +
scale_fill_viridis_d(option = "plasma") +
labs(title = "Seasonality Pattern Analysis",
subtitle = "Daily and Weekly") +
theme(axis.text.y = element_blank())
as.data.frame(fnb_msts_dec) %>%
mutate(hour = fnb_pad$hour) %>%
# group_by(day, hour) %>%
# summarise(seasonal = sum(Seasonal24 + Seasonal168)) %>%
distinct(hour, Seasonal168) %>%
ggplot(mapping = aes(x = hour, y = Seasonal168)) +
geom_col() +
scale_fill_viridis_d(option = "plasma") +
labs(title = "Seasonality Pattern Analysis",
subtitle = "Daily and Weekly") +
theme(axis.text.y = element_blank())
as.data.frame(fnb_msts_dec) %>%
mutate(hour = fnb_pad$hour) %>%
distinct(hour, Seasonal24) %>%
ggplot(mapping = aes(x = hour, y = Seasonal24)) +
geom_col() +
scale_fill_viridis_d(option = "plasma") +
labs(title = "Seasonality Pattern Analysis",
subtitle = "Daily and Weekly") +
theme(axis.text.y = element_blank())
fnb_pad %>%
mutate(seasonal = fnb_dec$seasonal) %>% # create the seasonal column from decomposed ts object
distinct(hour, seasonal) %>% # only show the unique values
ggplot(mapping = aes(x = hour, y = seasonal)) +
geom_col() +
scale_x_continuous(breaks = seq(0,24,1)) +
labs(title = "Seasonality Pattern Analysis",
subtitle = "Hourly") +
theme(axis.text.y = element_blank()) # we're not interested in seasonal values
as.data.frame(fnb_msts_dec) %>%
mutate(day = fnb_pad$day,
hour = fnb_pad$hour) %>%
group_by(day, hour) %>%
summarise(seasonal = sum(Seasonal24 + Seasonal168)) %>%
distinct(hour, day, seasonal) %>%
ggplot(mapping = aes(x = hour, y = seasonal)) +
geom_col(aes(fill = day)) +
scale_fill_viridis_d(option = "plasma") +
labs(title = "Seasonality Pattern Analysis",
subtitle = "Hourly and Daily") +
theme(axis.text.y = element_blank())
as.data.frame(fnb_msts_dec) %>%
mutate(hour = fnb_pad$hour) %>%
distinct(hour, Seasonal24) %>%
ggplot(mapping = aes(x = hour, y = Seasonal24)) +
geom_col() +
scale_fill_viridis_d(option = "plasma") +
labs(title = "Seasonality Pattern Analysis",
subtitle = "Hourly") +
theme(axis.text.y = element_blank())
as.data.frame(fnb_msts_dec) %>%
mutate(day = fnb_pad$day) %>%
# group_by(day, hour) %>%
# summarise(seasonal = sum(Seasonal24 + Seasonal168)) %>%
distinct(hour, Seasonal168) %>%
ggplot(mapping = aes(x = day, y = Seasonal168)) +
geom_col() +
scale_fill_viridis_d(option = "plasma") +
labs(title = "Seasonality Pattern Analysis",
subtitle = "Daily") +
theme(axis.text.y = element_blank())
as.data.frame(fnb_msts_dec) %>%
mutate(day = fnb_pad$day) %>%
# group_by(day, hour) %>%
# summarise(seasonal = sum(Seasonal24 + Seasonal168)) %>%
distinct(day, Seasonal168) %>%
ggplot(mapping = aes(x = day, y = Seasonal168)) +
geom_col() +
scale_fill_viridis_d(option = "plasma") +
labs(title = "Seasonality Pattern Analysis",
subtitle = "Daily") +
theme(axis.text.y = element_blank())
msts(data = fnb_pad$visitor, seasonal.periods = c(24, 24*7)) %>%
# mstl() %>%
autoplot()
as.data.frame(fnb_msts_dec) %>%
mutate(hour = fnb_pad$hour) %>%
distinct(hour, Seasonal24) %>%
ggplot(mapping = aes(x = hour, y = Seasonal24)) +
geom_col() +
labs(title = "Seasonality Pattern Analysis",
subtitle = "Hourly") +
theme(axis.text.y = element_blank())
as.data.frame(fnb_msts_dec) %>% # change data type to dataframe as ggplot only accepts dataframe
mutate(hour = fnb_pad$hour) %>% # create the hour column
# distinct(hour, Seasonal24) %>%
ggplot(mapping = aes(x = hour, y = Seasonal24)) +
geom_col() +
labs(title = "Seasonality Pattern Analysis",
subtitle = "Hourly") +
theme(axis.text.y = element_blank())
as.data.frame(fnb_msts_dec) %>%
mutate(day = fnb_pad$day) %>%
distinct(day, Seasonal168) %>%
ggplot(mapping = aes(x = day, y = Seasonal168)) +
geom_col() +
scale_fill_viridis_d(option = "plasma") +
labs(title = "Seasonality Pattern Analysis",
subtitle = "Daily") +
theme(axis.text.y = element_blank())
as.data.frame(fnb_msts_dec) %>%
mutate(day = fnb_pad$day) %>%
# distinct(day, Seasonal168) %>%
ggplot(mapping = aes(x = day, y = Seasonal168)) +
geom_col() +
scale_fill_viridis_d(option = "plasma") +
labs(title = "Seasonality Pattern Analysis",
subtitle = "Daily") +
theme(axis.text.y = element_blank())
as.data.frame(fnb_msts_dec) %>% # change data type to dataframe as ggplot only accepts dataframe
mutate(day = fnb_pad$day) %>% # create the day column
ggplot(mapping = aes(x = day, y = Seasonal168)) + # Seasonal168 contains 2nd seasonal (24*7 = 168)
geom_col() +
labs(title = "Seasonality Pattern Analysis",
subtitle = "Daily") +
theme(axis.text.y = element_blank()) # we're not interested in seasonal values
as.data.frame(fnb_msts_dec) %>% # change data type to dataframe as ggplot only accepts dataframe
mutate(day = fnb_pad$day, # create the day column
hour = fnb_pad$hour) %>% # create the hour column
group_by(day, hour) %>% # group the data frame by day and hour
summarise(seasonal = sum(Seasonal24 + Seasonal168)) %>% # then create new column called seasonal whose content is the combination between 1st and 2nd seasonality
distinct(hour, day, seasonal) %>%
ggplot(mapping = aes(x = hour, y = seasonal)) +
geom_col(aes(fill = day)) +
scale_fill_viridis_d(option = "plasma") +
labs(title = "Seasonality Pattern Analysis",
subtitle = "Hourly and Daily") +
theme(axis.text.y = element_blank())
as.data.frame(fnb_msts_dec) %>% # change data type to dataframe as ggplot only accepts dataframe
mutate(day = fnb_pad$day, # create the day column
hour = fnb_pad$hour) %>% # create the hour column
group_by(day, hour) %>% # group the data frame by day and hour
summarise(seasonal = sum(Seasonal24 + Seasonal168)) %>% # then create new column called seasonal whose content is the combination between 1st and 2nd seasonality
# distinct(hour, day, seasonal) %>%
ggplot(mapping = aes(x = hour, y = seasonal)) +
geom_col(aes(fill = day)) +
scale_fill_viridis_d(option = "plasma") +
labs(title = "Seasonality Pattern Analysis",
subtitle = "Hourly and Daily") +
theme(axis.text.y = element_blank())
as.data.frame(fnb_msts_dec) %>% # change data type to dataframe as ggplot only accepts dataframe
mutate(day = fnb_pad$day, # create the day column
hour = fnb_pad$hour) %>% # create the hour column
group_by(day, hour) %>% # group the data frame by day and hour
summarise(seasonal = sum(Seasonal24 + Seasonal168)) %>% # then create new column called seasonal whose content is the combination between 1st and 2nd seasonality
ggplot(mapping = aes(x = hour, y = seasonal)) +
geom_col(aes(fill = day)) +
# scale_fill_viridis_d(option = "plasma") +
labs(title = "Seasonality Pattern Analysis",
subtitle = "Hourly and Daily") +
theme(axis.text.y = element_blank())
as.data.frame(fnb_msts_dec) %>% # change data type to dataframe as ggplot only accepts dataframe
mutate(day = fnb_pad$day, # create the day column
hour = fnb_pad$hour) %>% # create the hour column
group_by(day, hour) %>% # group the data frame by day and hour
summarise(seasonal = sum(Seasonal24 + Seasonal168)) %>% # then create new column called seasonal whose content is the combination between 1st and 2nd seasonality
ggplot(mapping = aes(x = hour, y = seasonal)) +
geom_col(aes(fill = day)) +
scale_fill_viridis_d(option = "plasma") +
labs(title = "Seasonality Pattern Analysis",
subtitle = "Hourly and Daily") +
theme(axis.text.y = element_blank())
hist(fnb_dec$random)
shapiro.test(fnb_dec$random)
hist(fnb_dec$random, breaks = 50)
shapiro.test(fnb_dec$random)
fnb_dec
hist(fnb_dec$random, breaks = 50)
shapiro.test(fnb_dec$random) # we expect to have p-value greater than 0.05
fnb_dec
fnb_ts
log(fnb_ts)
sqrt(fnb_ts)
sqrt(fnb_ts) %>% autoplot()
sqrt(fnb_ts) %>% autoplot()
fnb_ts %>% autoplot()
sqrt(fnb_ts) %>% decompose(type = "additive") %>% shapiro.test(.$random)
shapiro.test((sqrt(fnb_ts) %>% decompose(type = "additive"))$random)
shapiro.test(fnb_dec$random) # we expect to have p-value greater than 0.05
shapiro.test((sqrt(fnb_ts) %>% decompose(type = "additive"))$random)
Box.test(fnb_dec$random)
Box.test((sqrt(fnb_ts) %>% decompose(type = "additive"))$random)
Box.test((log10(fnb_ts) %>% decompose(type = "additive"))$random)
Box.test((log(fnb_ts) %>% decompose(type = "additive"))$random)
Box.test((log(fnb_ts, base = 10) %>% decompose(type = "additive"))$random)
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
data.frame(
xt = c(AirPassengers),
lag1 = lag(x = as.vector(AirPassengers), n = 1),
lag2 = lag(x = as.vector(AirPassengers), n = 2),
lag3 = lag(x = as.vector(AirPassengers), n = 3),
lag4 = lag(x = as.vector(AirPassengers), n = 4),
lag5 = lag(x = as.vector(AirPassengers), n = 5)
) %>%
na.omit() %>%
GGally::ggcorr()
data.frame(
xt = c(diff(AirPassengers)),
lag1 = lag(x = as.vector(diff(AirPassengers)), n = 1),
lag2 = lag(x = as.vector(diff(AirPassengers)), n = 2),
lag3 = lag(x = as.vector(diff(AirPassengers)), n = 3),
lag4 = lag(x = as.vector(diff(AirPassengers)), n = 4),
lag5 = lag(x = as.vector(diff(AirPassengers)), n = 5)
) %>%
na.omit() %>%
GGally::ggcorr()
Box.test((diff(fnb_ts) %>% decompose(type = "additive"))$random)
Box.test((diff(fnb_ts, differences = 2) %>% decompose(type = "additive"))$random)
Box.test((diff(fnb_ts, differences = 3) %>% decompose(type = "additive"))$random)
Box.test((diff(fnb_ts, lag = 2) %>% decompose(type = "additive"))$random)
Box.test((diff(fnb_ts, lag = 2, differences = 2) %>% decompose(type = "additive"))$random)
Box.test((diff(fnb_ts, lag = 3, differences = 3) %>% decompose(type = "additive"))$random)
Box.test((diff(fnb_ts, lag = 1, differences = 3) %>% decompose(type = "additive"))$random)
Box.test((diff(fnb_ts, lag = 2, differences = 3) %>% decompose(type = "additive"))$random)
Box.test((diff(fnb_ts, lag = 2, differences = 4) %>% decompose(type = "additive"))$random)
Box.test((diff(fnb_ts, lag = 2, differences = 5) %>% decompose(type = "additive"))$random)
Box.test((diff(fnb_ts, lag = 2, differences = 6) %>% decompose(type = "additive"))$random)
Box.test((diff(fnb_ts, lag = 2, differences = 8) %>% decompose(type = "additive"))$random)
Box.test((diff(fnb_ts, lag = 2, differences = 9) %>% decompose(type = "additive"))$random)
Box.test((diff(fnb_ts, lag = 3, differences = 9) %>% decompose(type = "additive"))$random)
Box.test((diff(fnb_ts, lag = 1, differences = 9) %>% decompose(type = "additive"))$random)
Box.test((diff(fnb_ts, lag = 2, differences = 9) %>% decompose(type = "additive"))$random)
diff(fnb_ts, lag = 2, differences = 9) %>% decompose(type = "additive") %>%
autoplot()
fnb_msts_dec %>% autoplot()
fnb_msts_dec
fnb_msts_dec[,4]
fnb_msts_dec[,5]
head(fnb_msts_dec[,5])
head(fnb_msts_dec)
Box.test(fnb_msts_dec[,5])
Box.test(diff(fnb_msts_dec[,5]))
Box.test(diff(fnb_msts_dec[,5], lag = 2, differences = 9))
Box.test(diff(fnb_msts_dec[,5], lag = 1, differences = 9))
Box.test(diff(fnb_msts_dec[,5], lag = 2, differences = 7))
Box.test(diff(fnb_msts_dec[,5], lag = 2, differences = 4))
Box.test(diff(fnb_msts_dec[,5], lag = 2, differences = 2))
Box.test(diff(fnb_msts_dec[,5], lag = 2, differences = 3))
Box.test(diff(fnb_msts_dec[,5], lag = 2, differences = 2.5))
Box.test(diff(fnb_msts_dec[,5], lag = 2, differences = 3))
autoplot(diff(fnb_msts_dec[,5], lag = 2, differences = 3))
diff(fnb_msts, lag = 2, differences = 3) %>% mstl() %>% autoplot()
fnb_msts %>% mstl() %>% autoplot()
diff(fnb_msts, lag = 2, differences = 3) %>% mstl() %>% autoplot()
aa <- diff(fnb_msts, lag = 2, differences = 3) %>% mstl()
Box.test(aa, lag = 2)
Box.test(aa[,5], lag = 2)
Box.test(aa[,5])
aa[,5]
aa <- diff(fnb_msts, lag = 2, differences = 3) %>% mstl()
aa
Box.test(aa[,4])
aa <- diff(fnb_msts, lag = 1, differences = 3) %>% mstl()
Box.test(aa[,4])
aa <- diff(fnb_msts, lag = 2, differences = 4) %>% mstl()
Box.test(aa[,4])
adf.test(x = diff(fnb_msts, lag = 2, differences = 4))
hist(fnb_dec$random, breaks = 50)
shapiro.test(fnb_dec$random) # we expect to have p-value greater than 0.05
Box.test(fnb_dec$random)
Box.test((diff(fnb_ts, lag = 2, differences = 9) %>% decompose(type = "additive"))$random)
model_holt<- HoltWinters(train, seasonal = "additive")
summary(model_holt)
model_holt
model_holt$SSE
model_holt$call
Box.test(model_holt$fitted)
forecast::forecast.ets(object = model_holt, h = 24*7)
forecast.ets(object = ets(train, model = "ZZZ"), h = 24*7)
aa <- forecast.ets(object = ets(train, model = "ZZZ"), h = 24*7)
Box.test(aa$residuals)
aa <- ets(train, model = "ZZZ")
Box.test(aa$residuals)
aa
model_holt
aa <- ets(train, model = "ZZZ")
fnb_ts <- ts(data = fnb_pad$visitor, frequency = 24)
fnb_dec <- decompose(x = fnb_ts, type = "additive")
# split train-validation 1 seasonal
train <- head(fnb_ts, length(fnb_ts) - 24 * 7)
validation <- tail(fnb_ts, 24 * 7)
aa <- ets(train, model = "ZZZ")
Box.test(aa$residuals)
aa
model_holt
aa
forecast_holt <- forecast(model_holt, h = 24 * 7)
forecast_ets <- forecast(model_ets, h = 24 * 7)
model_ets <- ets(train, model = "ZZZ")
forecast_ets <- forecast(model_ets, h = 24 * 7)
MAE(y_pred = forecast_holt$mean, y_true = validation)
# check MAE
MAE(y_pred = forecast_holt$mean, y_true = validation)
forecast_holt$mean
validation
validation <- tail(fnb_ts, 24 * 7)
24*7
validation
forecast_holt <- forecast(model_holt, h = 24 * 7) # model HoltWinters
forecast_ets <- forecast(model_ets, h = 24 * 7) # model ets
# check MAE
MAE(y_pred = forecast_holt$mean, y_true = validation)
forecast_holt
forecast_holt$mean
# split train-validation 1 seasonal
train <- head(fnb_ts, length(fnb_ts) - 24 * 7)
train
model_holt<- HoltWinters(train, seasonal = "additive")
forecast_holt <- forecast(model_holt, h = 24 * 7) # model HoltWinters
forecast_holt$mean
forecast_ets <- forecast(model_ets, h = 24 * 7) # model ets
MAE(y_pred = forecast_holt$mean, y_true = validation)
MAE(y_pred = forecast_ets$mean, y_true = validation)
plot_forecast(forecast_holt)
plot_forecast(forecast_ets)
test_forecast(actual = fnb_ts, forecast.obj = forecast_holt,
train = train, test = validation)
test_forecast(actual = fnb_ts, forecast.obj = forecast_ets,
train = train, test = validation)
MAE(y_pred = forecast_holt$mean, y_true = validation)
MAE(y_pred = forecast_ets$mean, y_true = validation)
adf.test(fnb_ts)
model_arima <- auto.arima(train)
forecast_arima <- forecast(model_arima, h = length(validation))
MAE(y_pred = forecast_arima$mean, y_true = validation)
summary(model_arima)
model_arima <- auto.arima(diff(train))
summary(model_arima)
forecast_arima <- forecast(model_arima, h = length(validation))
MAE(y_pred = forecast_arima$mean, y_true = validation)
model_arima <- auto.arima(train)
summary(model_arima)
forecast_arima <- forecast(model_arima, h = length(validation))
MAE(y_pred = forecast_arima$mean, y_true = validation)
# ARIMA(2,0,2)(0,1,0)[168]
TSstudio::test_forecast(actual = fnb_ts, forecast.obj = forecast_arima,
train = train, test = validation)
# split train-validation 2 seasonal
train_2 <- head(fnb_msts, length(fnb_msts) - 24 * 7)
validation_2 <- tail(fnb_msts, 24 * 7)
model_holt_msts<- HoltWinters(train_2)
forecast_holt2 <- forecast(model_holt_msts, h = 24 * 7)
MAE(y_pred = forecast_holt2$mean, y_true = validation_2)
MAEoneHolt
# check MAE
MAEoneHolt <- MAE(y_pred = forecast_holt$mean, y_true = validation)
MAEoneETS <- MAE(y_pred = forecast_ets$mean, y_true = validation)
MAEoneARIMA <- MAE(y_pred = forecast_arima$mean, y_true = validation)
MAEtwoHolt <- MAE(y_pred = forecast_holt2$mean, y_true = validation_2)
plot_forecast(forecast_holt2)
TSstudio::test_forecast(actual = fnb_msts, forecast.obj = forecast_holt2,
train = train_2, test = validation_2)
model_arima2 <- auto.arima(train_2)
tsdisplay(fnb_msts)
tsdisplay(fnb_msts, lag.max = 50)
pacf(fnb_msts, lag.max = 30)
acf(fnb_msts, lag.max = 170)
acf(fnb_msts, lag.max = 170)
pacf(fnb_msts, lag.max = 30)
Acf(fnb_msts, lag.max = 170)
Pacf(fnb_msts, lag.max = 30)
Acf(fnb_msts, lag.max = 170)
Pacf(fnb_msts, lag.max = 30)
train_2
model_arima2 <- auto.arima(train_2)
data.frame(Model = c("HoltWinters one seasonal",
"ets one seasonal",
"SARIMA one seasonal",
"HoltWinters two seasonal"),
MAE = c(MAEoneHolt,
MAEoneETS,
MAEoneARIMA,
MAEtwoHolt))
model_final <- HoltWinters(fnb_msts, seasonal = "additive")
forecast_test <- forecast::forecast(model_ready, h = 24*7)
forecast_test <- forecast(model_final, h = 24*7)
fnb_test <- read.csv("data/data-test.csv")
fnb_test
OpenTimeIdx <- grep("^10$", (rep(0:23, 7))) # create the index for each 10 AM every day
CloseTimeIdx <- grep("^22$", (rep(0:23, 7))) # create the index for each 10 PM every day
# create new column as visitor column by filtering using the indices defined above
testOutput <- forecast_test$mean[c(OpenTimeIdx[1]:CloseTimeIdx[1],
OpenTimeIdx[2]:CloseTimeIdx[2],
OpenTimeIdx[3]:CloseTimeIdx[3],
OpenTimeIdx[4]:CloseTimeIdx[4],
OpenTimeIdx[5]:CloseTimeIdx[5],
OpenTimeIdx[6]:CloseTimeIdx[6],
OpenTimeIdx[7]:CloseTimeIdx[7])]
fnb_test$visitor <- testOutput # fill in the visitor column
write.csv(fnb_test, file = "data/testFinal.csv") # save the dataset as csv
