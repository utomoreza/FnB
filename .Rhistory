fnb_ts <- ts(data = fnb_pad$visitor, frequency = 24*7)
autoplot(fnb_ts)
fnb_dec <- decompose(x = fnb_ts, type = "additive")
fnb_dec %>% autoplot()
hist(fnb_dec$random)
shapiro.test(fnb_dec$random)
Box.test(fnb_dec$random)
# split train-validation 1 seasonal
train <- head(fnb_ts, length(fnb_ts) - 24 * 7)
validation <- tail(fnb_ts, 24 * 7)
model_holt<- HoltWinters(train, seasonal = "additive")
fnb_ts <- ts(data = fnb_pad$visitor, frequency = 24)
fnb_dec <- decompose(x = fnb_ts, type = "additive")
# split train-validation 1 seasonal
train <- head(fnb_ts, length(fnb_ts) - 24 * 7)
validation <- tail(fnb_ts, 24 * 7)
model_holt<- HoltWinters(train, seasonal = "additive")
model_holt<- HoltWinters(train, seasonal = "additive")
forecast_holt <- forecast::forecast(model_holt, h = 24 * 7)
MLmetrics::MAE(y_pred = forecast_holt$mean, y_true = validation)
TSstudio::plot_forecast(forecast_holt) #, title = "Model Complex Seasonality")
TSstudio::test_forecast(actual = fnb_ts, forecast.obj = forecast_holt,
train = train, test = validation)
fnb_ts <- ts(data = fnb_pad$visitor, frequency = 24*7)
# split train-validation 1 seasonal
train <- head(fnb_ts, length(fnb_ts) - 24 * 7)
validation <- tail(fnb_ts, 24 * 7)
model_holt<- HoltWinters(train, seasonal = "additive")
forecast_holt <- forecast::forecast(model_holt, h = 24 * 7)
MLmetrics::MAE(y_pred = forecast_holt$mean, y_true = validation)
TSstudio::plot_forecast(forecast_holt) #, title = "Model Complex Seasonality")
TSstudio::test_forecast(actual = fnb_ts, forecast.obj = forecast_holt,
train = train, test = validation)
model_arima <- forecast::auto.arima(train)
forecast_arima <- forecast::forecast(model_arima, h = length(validation))
TSstudio::plot_forecast(forecast_arima)
MLmetrics::MAE(y_pred = forecast_arima$mean, y_true = validation)
TSstudio::test_forecast(actual = fnb_ts, forecast.obj = forecast_arima,
train = train, test = validation)
forecast::msts(data = fnb_pad$visitor, seasonal.periods = c(24, 24*7)) %>%
forecast::mstl() %>%
autoplot()
autoplot(fnb_ts)
fnb_dec %>% autoplot()
fnb_dec <- decompose(x = fnb_ts, type = "additive")
fnb_dec %>% autoplot()
fnb_msts <- forecast::msts(data = fnb_pad$demand, seasonal.periods = c(24, 24*7))
forecast::msts(data = fnb_pad$visitor, seasonal.periods = c(24, 24*7)) %>%
forecast::mstl() %>%
autoplot()
fnb_msts <- forecast::msts(data = fnb_pad$visitor, seasonal.periods = c(24, 24*7))
# split train-validation 2 seasonal
train_2 <- head(fnb_msts, length(fnb_msts) - 24 * 7)
validation_2 <- tail(fnb_msts, 24 * 7)
model_holt_msts<- HoltWinters(train_2)
forecast_holt2 <- forecast::forecast(model_holt_msts, h = 24 * 7)
MLmetrics::MAE(y_pred = forecast_holt2$mean, y_true = validation_2)
plot_forecast(forecast_holt2)
MLmetrics::MAE(y_pred = forecast_holt2$mean, y_true = validation_2)
TSstudio::plot_forecast(forecast_holt2)
forecast_holt2$mean %>% autoplot() + autolayer(validation_2)
forecast_holt2$mean %>% autoplot()
forecast_holt2$mean %>% autoplot(color = "blue") +
autolayer(validation_2, color = "green")
tseries::adf.test(x = fnb_ts)
24*7
forecast::tsdisplay(fnb_msts, lag.max = 170)
fnb_ts <- ts(data = fnb_pad$visitor, frequency = 24)
autoplot(fnb_ts)
fnb_dec <- decompose(x = fnb_ts, type = "additive")
fnb_dec %>% autoplot()
fnb_ts <- ts(data = fnb_pad$visitor, frequency = 24*7)
autoplot(fnb_ts)
fnb_dec <- decompose(x = fnb_ts, type = "additive")
fnb_dec %>% autoplot()
model_holt_msts<- HoltWinters(train_2, seasonal = "additive")
forecast_holt2 <- forecast::forecast(model_holt_msts, h = 24 * 7)
MLmetrics::MAE(y_pred = forecast_holt2$mean, y_true = validation_2)
TSstudio::plot_forecast(forecast_holt2)
# split train-validation 1 seasonal
train <- head(fnb_ts, length(fnb_ts) - 24 * 7)
validation <- tail(fnb_ts, 24 * 7)
model_holt<- HoltWinters(train, seasonal = "additive")
forecast_holt <- forecast::forecast(model_holt, h = 24 * 7)
MLmetrics::MAE(y_pred = forecast_holt$mean, y_true = validation)
TSstudio::plot_forecast(forecast_holt) #, title = "Model Complex Seasonality")
summary(model_arima)
model_arimaTuned <- arima(x = fnb_ts, order = c(1,0,1),
seasonal = list(order(c(1,0,1), period = 24)),
method = "ML")
model_arimaTuned <- arima(train_2, order = c(1,0,1),
seasonal = list(order = c(1,0,1), period = 24),
method = "ML")
forecast_arimaTuned <- forecast::forecast(model_arimaTuned, h = length(validation))
TSstudio::plot_forecast(forecast_arimaTuned)
MLmetrics::MAE(y_pred = forecast_arimaTuned$mean, y_true = validation)
TSstudio::test_forecast(actual = fnb_ts, forecast.obj = forecast_arimaTuned,
train = train, test = validation)
model_arimaTuned <- arima(train_2, order = c(1,0,1),
seasonal = list(order = c(1,0,1), period = 168),
method = "ML")
1+1
summary(model_holt)
MLmetrics::MAE(y_pred = forecast_holt$mean, y_true = train)
forecast_holt$mean
MLmetrics::MAE(y_pred = (forecast::forecast(model_holt, h = length(train)))$mean,
y_true = train)
fore <- forecast::forecast(model_holt, h = length(train))
fore
MLmetrics::MAE(y_pred = fore$mean,
y_true = train)
train
fore$mean
head(fore$mean)
head(train)
head(train)
tail(train)
train %>% autoplot()
fore$mean %>% autoplot()
fnb_test <- read.csv("data/data-test.csv")
fnb_test
fnb_pad
fnb
start_val <- make_datetime(year = year(min_date), month = month(min_date), day = day(min_date), hour = hour(hour(min_date)))
min_date <- min(fnb$transaction_date)
max_date <- max(fnb$transaction_date)
start_val <- make_datetime(year = year(min_date), month = month(min_date), day = day(min_date), hour = hour(hour(min_date)))
min_date
start_val <- make_datetime(year = year(min_date), month = month(min_date), day = day(min_date), hour = hour(min_date))
end_val <- make_datetime(year = year(max_date), month = month(max_date), day = day(max_date), hour = hour(max_date))
fnb_pad <- padr::pad(x = fnb, start_val = start_val, end_val = end_val)
fnb_pad
anyNA(fnb_pad)
fnb <- read.csv("data/data-train.csv")
fnb <- fnb %>% select(transaction_date, receipt_number)
fnb$transaction_date <- ymd_hms(fnb$transaction_date)
fnb <- fnb %>%
mutate(transaction_date = floor_date(x = .$transaction_date, unit = "hour"))
fnb <- fnb %>%
group_by(transaction_date) %>%
summarise(visitor = n_distinct(receipt_number)) %>%
ungroup()
fnb
min_date <- min(fnb$transaction_date)
min_date
max_date
max_date <- max(fnb$transaction_date)
max_date
start_val <- make_datetime(year = year(min_date), month = month(min_date), day = day(min_date), hour = hour(min_date))
end_val <- make_datetime(year = year(max_date), month = month(max_date), day = day(max_date), hour = hour(max_date))
fnb_pad <- padr::pad(x = fnb, start_val = start_val, end_val = end_val)
fnb_pad
anyNA(fnb)
fnb$date <- ymd(paste(year(fnb$transaction_date),
month(fnb$transaction_date),
day(fnb$transaction_date),
sep = "-"))
fnb$time <- hms(paste(hour(fnb$transaction_date), 0, 0, sep = ":"))
fnb$day <- wday(x = fnb$transaction_date, label = T, abbr = F)
fnb %>% ggplot(aes(x = hour(time), y = visitor)) +
geom_col(aes(fill = day)) +
theme_minimal() +
labs(title = "Number of visitors",
x = "Hour",
y = "Number of visitors",
fill = "Day")
fnb_ts <- ts(data = fnb$visitor, frequency = 13)
autoplot(fnb_ts)
fnb_dec <- decompose(x = fnb_ts, type = "additive")
fnb_dec %>% autoplot()
fnb_ts <- ts(data = fnb$visitor, frequency = 13*7)
fnb_dec <- decompose(x = fnb_ts, type = "additive")
fnb_dec %>% autoplot()
fnb_ts <- ts(data = fnb$visitor, frequency = 13*7*4)
fnb_dec <- decompose(x = fnb_ts, type = "additive")
fnb_dec %>% autoplot()
fnb_ts <- ts(data = fnb$visitor, frequency = 24*7)
fnb_dec <- decompose(x = fnb_ts, type = "additive")
fnb_dec %>% autoplot()
fnb_ts <- ts(data = fnb$visitor, frequency = 13*7)
fnb_ts <- ts(data = fnb$visitor, frequency = 12*7)
fnb_dec <- decompose(x = fnb_ts, type = "additive")
fnb_dec %>% autoplot()
fnb_ts <- ts(data = fnb$visitor, frequency = 13*7)
fnb_dec <- decompose(x = fnb_ts, type = "additive")
fnb_dec %>% autoplot()
min_date <- min(fnb$transaction_date)
max_date <- max(fnb$transaction_date)
start_val <- make_datetime(year = year(min_date), month = month(min_date), day = day(min_date), hour = hour(hms("00:00:00")))
end_val <- make_datetime(year = year(max_date), month = month(max_date), day = day(max_date), hour = hour(max_date))
fnb_pad <- padr::pad(x = fnb, start_val = start_val, end_val = end_val)
fnb <- read.csv("data/data-train.csv")
fnb <- fnb %>% select(transaction_date, receipt_number)
fnb$transaction_date <- ymd_hms(fnb$transaction_date)
fnb <- fnb %>%
mutate(transaction_date = floor_date(x = .$transaction_date, unit = "hour"))
fnb <- fnb %>%
group_by(transaction_date) %>%
summarise(visitor = n_distinct(receipt_number)) %>%
ungroup()
min_date <- min(fnb$transaction_date)
max_date <- max(fnb$transaction_date)
start_val <- make_datetime(year = year(min_date), month = month(min_date), day = day(min_date), hour = hour(hms("00:00:00")))
end_val <- make_datetime(year = year(max_date), month = month(max_date), day = day(max_date), hour = hour(max_date))
fnb_pad <- padr::pad(x = fnb, start_val = start_val, end_val = end_val)
fnb_pad
fnb_pad$visitor <- replace_na(fnb_pad$visitor, 0)
fnb_pad$date <- ymd(paste(year(fnb_pad$transaction_date),
month(fnb_pad$transaction_date),
day(fnb_pad$transaction_date),
sep = "-"))
fnb_pad$time <- hms(paste(hour(fnb_pad$transaction_date), 0, 0, sep = ":"))
fnb_pad$day <- wday(x = fnb_pad$transaction_date, label = T, abbr = F)
fnb_pad %>% ggplot(aes(x = hour(time), y = visitor)) +
geom_col(aes(fill = day)) +
theme_minimal() +
labs(title = "Number of visitors",
x = "Hour",
y = "Number of visitors",
fill = "Day")
fnb_ts <- ts(data = fnb_pad$visitor, frequency = 24)
autoplot(fnb_ts)
min_date <- min(fnb$transaction_date)
max_date <- max(fnb$transaction_date)
start_val <- make_datetime(year = year(min_date), month = month(min_date), day = day(min_date), hour = hour(min_date))
end_val <- make_datetime(year = year(max_date), month = month(max_date), day = day(max_date), hour = hour(max_date))
fnb_pad <- padr::pad(x = fnb, start_val = start_val, end_val = end_val)
fnb_pad
fnb_pad$visitor <- replace_na(fnb_pad$visitor, 0)
fnb_pad$date <- ymd(paste(year(fnb_pad$transaction_date),
month(fnb_pad$transaction_date),
day(fnb_pad$transaction_date),
sep = "-"))
fnb_pad$time <- hms(paste(hour(fnb_pad$transaction_date), 0, 0, sep = ":"))
fnb_pad$day <- wday(x = fnb_pad$transaction_date, label = T, abbr = F)
fnb_pad %>% ggplot(aes(x = hour(time), y = visitor)) +
geom_col(aes(fill = day)) +
theme_minimal() +
labs(title = "Number of visitors",
x = "Hour",
y = "Number of visitors",
fill = "Day")
fnb_ts <- ts(data = fnb_pad$visitor, frequency = 24)
autoplot(fnb_ts)
fnb_pad
fnb_dec <- decompose(x = fnb_ts, type = "additive")
fnb_dec %>% autoplot()
hist(fnb_dec$random)
shapiro.test(fnb_dec$random)
Box.test(fnb_dec$random)
tseries::adf.test(x = fnb_ts)
# split train-validation 1 seasonal
train <- head(fnb_ts, length(fnb_ts) - 24 * 7)
validation <- tail(fnb_ts, 24 * 7)
model_holt<- HoltWinters(train, seasonal = "additive")
forecast_holt <- forecast::forecast(model_holt, h = 24 * 7)
MLmetrics::MAE(y_pred = forecast_holt$mean, y_true = validation)
TSstudio::plot_forecast(forecast_holt) #, title = "Model Complex Seasonality")
fnb_ts <- ts(data = fnb_pad$visitor, frequency = 24*7)
fnb_dec <- decompose(x = fnb_ts, type = "additive")
fnb_dec %>% autoplot()
# split train-validation 1 seasonal
train <- head(fnb_ts, length(fnb_ts) - 24 * 7)
validation <- tail(fnb_ts, 24 * 7)
model_holt<- HoltWinters(train, seasonal = "additive")
forecast_holt <- forecast::forecast(model_holt, h = 24 * 7)
MLmetrics::MAE(y_pred = forecast_holt$mean, y_true = validation)
TSstudio::plot_forecast(forecast_holt) #, title = "Model Complex Seasonality")
TSstudio::test_forecast(actual = fnb_ts, forecast.obj = forecast_holt,
train = train, test = validation)
start_val <- make_datetime(year = year(min_date), month = month(min_date), day = day(min_date), hour = hour(hms("00:00:00")))
end_val <- make_datetime(year = year(max_date), month = month(max_date), day = day(max_date), hour = hour(max_date))
fnb_pad <- padr::pad(x = fnb, start_val = start_val, end_val = end_val)
fnb_pad
fnb_ts <- ts(data = fnb_pad$visitor, frequency = 24)
fnb_dec <- decompose(x = fnb_ts, type = "additive")
fnb_dec <- decompose(x = fnb_ts, type = "additive")
fnb_ts <- ts(data = fnb_pad$visitor, frequency = 24)
fnb_pad
fnb_pad$visitor <- replace_na(fnb_pad$visitor, 0)
fnb_ts <- ts(data = fnb_pad$visitor, frequency = 24)
fnb_dec <- decompose(x = fnb_ts, type = "additive")
fnb_dec %>% autoplot()
fnb_ts <- ts(data = fnb_pad$visitor, frequency = 24*7)
fnb_dec <- decompose(x = fnb_ts, type = "additive")
fnb_dec %>% autoplot()
# split train-validation 1 seasonal
train <- head(fnb_ts, length(fnb_ts) - 24 * 7)
validation <- tail(fnb_ts, 24 * 7)
model_holt<- HoltWinters(train, seasonal = "additive")
forecast_holt <- forecast::forecast(model_holt, h = 24 * 7)
MLmetrics::MAE(y_pred = forecast_holt$mean, y_true = validation)
TSstudio::plot_forecast(forecast_holt) #, title = "Model Complex Seasonality")
TSstudio::test_forecast(actual = fnb_ts, forecast.obj = forecast_holt,
train = train, test = validation)
model_arimaTuned <- arima(train, order = c(2,0,2),
seasonal = list(order = c(0,1,0), period = 24*7),
method = "ML")
model_ready <- HoltWinters(fnb_ts, seasonal = "additive")
forecast_test <- forecast::forecast(model_ready, h = 24*7)
forecast_test
fnb_test
testOutput <- forecast_test$mean
testOutput
forecast_test
0:167
data.frame(0:167)
data.frame(rep(0:23, 7))
grep("0$", data.frame(rep(0:23, 7)))
grep("0$", (rep(0:23, 7)))
grep("^0$", (rep(0:23, 7)))
grep("^0$", (rep(0:23, 7)))
grep("^23$", (rep(0:23, 7)))
data.frame(rep(0:23, 7))
grep("^0$", (rep(0:23, 7)))
grep("^23$", (rep(0:23, 7)))
fnb_test
data.frame(rep(0:23, 7))
grep("^10$", (rep(0:23, 7)))
grep("^22$", (rep(0:23, 7)))
OpenTimeIdx <- grep("^10$", (rep(0:23, 7)))
CloseTimeIdx <- grep("^22$", (rep(0:23, 7)))
[OpenTimeIdx[1]:CloseTimeIdx[1]]
OpenTimeIdx[1]:CloseTimeIdx[1]
OpenTimeIdx
forecast_test[OpenTimeIdx[1]:CloseTimeIdx[1],
OpenTimeIdx[2]:CloseTimeIdx[2],
OpenTimeIdx[3]:CloseTimeIdx[3],
OpenTimeIdx[4]:CloseTimeIdx[4],
OpenTimeIdx[5]:CloseTimeIdx[5],
OpenTimeIdx[6]:CloseTimeIdx[6],
OpenTimeIdx[7]:CloseTimeIdx[7]]
forecast_test[c(OpenTimeIdx[1]:CloseTimeIdx[1]),
c(OpenTimeIdx[2]:CloseTimeIdx[2]),
c(OpenTimeIdx[3]:CloseTimeIdx[3]),
c(OpenTimeIdx[4]:CloseTimeIdx[4]),
c(OpenTimeIdx[5]:CloseTimeIdx[5]),
c(OpenTimeIdx[6]:CloseTimeIdx[6]),
c(OpenTimeIdx[7]:CloseTimeIdx[7])]
c(OpenTimeIdx[1]:CloseTimeIdx[1]),
c(OpenTimeIdx[1]:CloseTimeIdx[1])
forecast_test[c(OpenTimeIdx[1]:CloseTimeIdx[1],
OpenTimeIdx[2]:CloseTimeIdx[2],
OpenTimeIdx[3]:CloseTimeIdx[3],
OpenTimeIdx[4]:CloseTimeIdx[4],
OpenTimeIdx[5]:CloseTimeIdx[5],
OpenTimeIdx[6]:CloseTimeIdx[6],
OpenTimeIdx[7]:CloseTimeIdx[7])]
c(OpenTimeIdx[1]:CloseTimeIdx[1],
OpenTimeIdx[2]:CloseTimeIdx[2],
OpenTimeIdx[3]:CloseTimeIdx[3],
OpenTimeIdx[4]:CloseTimeIdx[4],
OpenTimeIdx[5]:CloseTimeIdx[5],
OpenTimeIdx[6]:CloseTimeIdx[6],
OpenTimeIdx[7]:CloseTimeIdx[7])
forecast_test$mean[c(OpenTimeIdx[1]:CloseTimeIdx[1],
OpenTimeIdx[2]:CloseTimeIdx[2],
OpenTimeIdx[3]:CloseTimeIdx[3],
OpenTimeIdx[4]:CloseTimeIdx[4],
OpenTimeIdx[5]:CloseTimeIdx[5],
OpenTimeIdx[6]:CloseTimeIdx[6],
OpenTimeIdx[7]:CloseTimeIdx[7])]
fnb_test$visitor <- testOutput
fnb_test
testOutput
testOutput <- forecast_test$mean[c(OpenTimeIdx[1]:CloseTimeIdx[1],
OpenTimeIdx[2]:CloseTimeIdx[2],
OpenTimeIdx[3]:CloseTimeIdx[3],
OpenTimeIdx[4]:CloseTimeIdx[4],
OpenTimeIdx[5]:CloseTimeIdx[5],
OpenTimeIdx[6]:CloseTimeIdx[6],
OpenTimeIdx[7]:CloseTimeIdx[7])]
fnb_test$visitor <- testOutput
fnb_test
write.csv(fnb_test, file = "/data/testOutput.csv")
write.csv(fnb_test, file = "data/testOutput.csv")
forecast::msts(data = fnb_pad$visitor, seasonal.periods = c(24, 24*7)) %>%
forecast::mstl() %>%
autoplot()
fnb_msts <- forecast::msts(data = fnb_pad$visitor, seasonal.periods = c(24, 24*7))
model_holt_msts<- HoltWinters(train_2)
forecast_holt2 <- forecast::forecast(model_holt_msts, h = 24 * 7)
MLmetrics::MAE(y_pred = forecast_holt2$mean, y_true = validation_2)
model_ready <- HoltWinters(fnb_msts)
forecast_test <- forecast::forecast(model_ready, h = 24*7)
OpenTimeIdx <- grep("^10$", (rep(0:23, 7)))
CloseTimeIdx <- grep("^22$", (rep(0:23, 7)))
testOutput <- forecast_test$mean[c(OpenTimeIdx[1]:CloseTimeIdx[1],
OpenTimeIdx[2]:CloseTimeIdx[2],
OpenTimeIdx[3]:CloseTimeIdx[3],
OpenTimeIdx[4]:CloseTimeIdx[4],
OpenTimeIdx[5]:CloseTimeIdx[5],
OpenTimeIdx[6]:CloseTimeIdx[6],
OpenTimeIdx[7]:CloseTimeIdx[7])]
fnb_test <- read.csv("data/data-test.csv")
fnb_test
fnb_test$visitor <- testOutput
write.csv(fnb_test, file = "data/testOutput2Season.csv")
forecast_test <- forecast::forecast(model_arima, h = 24*7)
testOutput <- forecast_test$mean[c(OpenTimeIdx[1]:CloseTimeIdx[1],
OpenTimeIdx[2]:CloseTimeIdx[2],
OpenTimeIdx[3]:CloseTimeIdx[3],
OpenTimeIdx[4]:CloseTimeIdx[4],
OpenTimeIdx[5]:CloseTimeIdx[5],
OpenTimeIdx[6]:CloseTimeIdx[6],
OpenTimeIdx[7]:CloseTimeIdx[7])]
fnb_test <- read.csv("data/data-test.csv")
fnb_test$visitor <- testOutput
write.csv(fnb_test, file = "data/testOutputArima.csv")
one <- read.csv("data/testOutput.csv")
two <- read.csv("data/testOutput2Season.csv")
three <- read.csv("data/testOutputArima.csv")
cbind(one$visitor, two$visitor, three$visitor)
as.data.frame(cbind(one$visitor, two$visitor, three$visitor))
as.data.frame(cbind(one = one$visitor, two = two$visitor, three = three$visitor))
one
as.data.frame(cbind(datetime = one$datetime, one = one$visitor, two = two$visitor, three = three$visitor))
one
data.frame(datetime = one$datetime, cbind(one = one$visitor, two = two$visitor, three = three$visitor))
data.frame(datetime = one$datetime, cbind(one = one$visitor, two = two$visitor, three = three$visitor)) %>%
ggplot(aes(datetime)) +
geom_line(aes(y = one)) +
geom_line(aes(y = two)) +
geom_line(aes(y = three))
data.frame(datetime = one$datetime, cbind(one = one$visitor, two = two$visitor, three = three$visitor)) %>%
ggplot(aes(datetime))
data.frame(datetime = one$datetime, cbind(one = one$visitor, two = two$visitor, three = three$visitor))
data.frame(datetime = ymd_hms(one$datetime), cbind(one = one$visitor, two = two$visitor, three = three$visitor))
data.frame(datetime = ymd_hms(one$datetime), cbind(one = one$visitor, two = two$visitor, three = three$visitor)) %>%
ggplot(aes(datetime)) +
geom_line(aes(y = one)) +
geom_line(aes(y = two)) +
geom_line(aes(y = three))
data.frame(datetime = ymd_hms(one$datetime), cbind(one = one$visitor, two = two$visitor, three = three$visitor)) %>%
ggplot(aes(datetime)) +
geom_line(aes(y = one), color = "blue") +
geom_line(aes(y = two), color = "red") +
geom_line(aes(y = three), color = "green")
p1 <- data.frame(datetime = ymd_hms(one$datetime), cbind(one = one$visitor, two = two$visitor, three = three$visitor)) %>%
ggplot(aes(datetime)) +
geom_line(aes(y = one), color = "blue") +
geom_line(aes(y = two), color = "red") +
geom_line(aes(y = three), color = "green")
plotly::ggplotly(p1)
model_ready <- forecast::auto.arima(fnb_msts)
forecast_test <- forecast::forecast(model_ready, h = 24*7)
testOutput <- forecast_test$mean[c(OpenTimeIdx[1]:CloseTimeIdx[1],
OpenTimeIdx[2]:CloseTimeIdx[2],
OpenTimeIdx[3]:CloseTimeIdx[3],
OpenTimeIdx[4]:CloseTimeIdx[4],
OpenTimeIdx[5]:CloseTimeIdx[5],
OpenTimeIdx[6]:CloseTimeIdx[6],
OpenTimeIdx[7]:CloseTimeIdx[7])]
fnb_test <- read.csv("data/data-test.csv")
fnb_test$visitor <- testOutput
write.csv(fnb_test, file = "data/testOutputSarima.csv")
p1 <- data.frame(datetime = ymd_hms(one$datetime), cbind(one = one$visitor, two = two$visitor, three = three$visitor, four = four$visitor)) %>%
ggplot(aes(datetime)) +
geom_line(aes(y = one), color = "blue") +
geom_line(aes(y = two), color = "red") +
geom_line(aes(y = three), color = "green") +
geom_line(aes(y = four), color = "black")
four <- read.csv("data/testOutputSarima.csv")
p1 <- data.frame(datetime = ymd_hms(one$datetime), cbind(one = one$visitor, two = two$visitor, three = three$visitor, four = four$visitor)) %>%
ggplot(aes(datetime)) +
geom_line(aes(y = one), color = "blue") +
geom_line(aes(y = two), color = "red") +
geom_line(aes(y = three), color = "green") +
geom_line(aes(y = four), color = "black")
plotly::ggplotly(p1)
modelSarimaTest <- model_ready
summary(modelSarimaTest)
fnb_pad
fnb
tbats_mod <- fnb_msts %>%
log() %>%
forecast::tbats(use.box.cox = FALSE,
use.trend = TRUE,
use.damped.trend = TRUE)
fnb_msts %>%
log()
fnb_msts
tbats_mod <- fnb_msts %>%
forecast::tbats(use.box.cox = FALSE,
use.trend = TRUE,
use.damped.trend = TRUE)
tbats_fore <-  forecast::forecast(tbats_mod,h=24*7)
fnb_test <- read.csv("data/data-test.csv")
testOutput <- tbats_fore$mean[c(OpenTimeIdx[1]:CloseTimeIdx[1],
OpenTimeIdx[2]:CloseTimeIdx[2],
OpenTimeIdx[3]:CloseTimeIdx[3],
OpenTimeIdx[4]:CloseTimeIdx[4],
OpenTimeIdx[5]:CloseTimeIdx[5],
OpenTimeIdx[6]:CloseTimeIdx[6],
OpenTimeIdx[7]:CloseTimeIdx[7])]
fnb_test$visitor <- testOutput
write.csv(fnb_test, file = "data/testOutputTBATS.csv")
four <- read.csv("data/testOutputTBATS.csv")
p1 <- data.frame(datetime = ymd_hms(one$datetime), cbind(one = one$visitor, two = two$visitor, three = three$visitor, four = four$visitor)) %>%
ggplot(aes(datetime)) +
geom_line(aes(y = one), color = "blue") +
geom_line(aes(y = two), color = "red") +
geom_line(aes(y = three), color = "green") +
geom_line(aes(y = four), color = "black")
plotly::ggplotly(p1)
stlm_model <- fnb_msts %>%
forecast::stlm(lambda = 0) %>%
forecast::forecast(h = 24*7)
fnb_msts %>%
forecast::stlm(lambda = 0)
forecast::stlm(y = fnb_msts, lambda = 0)
forecast::stlm(y = fnb_ts, lambda = 0)
